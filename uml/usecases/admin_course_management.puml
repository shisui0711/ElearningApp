@startuml
' Admin Course Management Use Case Diagram
skinparam usecase {
  BackgroundColor #f0f8ff
  BorderColor #2f4f4f
  ArrowColor #2f4f4f
}

skinparam actorStyle awesome
skinparam linetype ortho

' Define actors
actor "Admin" as admin #lightpink

' Define use cases
usecase "Manage Courses" as managecourses
usecase "Create Course" as createCourse
usecase "Edit Course Details" as editCourse
usecase "Deactivate Course" as deactivateCourse
usecase "View Course List" as viewCourses
usecase "Assign Course to Department" as assignCourseToDepartment
usecase "Manage Course Materials" as manageCourseMaterials

' Relationships
admin --> managecourses
managecourses ..> createCourse : <<include>> #purple
managecourses ..> editCourse : <<include>> #purple
managecourses ..> deactivateCourse : <<include>> #purple
managecourses ..> viewCourses : <<include>> #purple
managecourses ..> assignCourseToDepartment : <<include>> #purple
managecourses ..> manageCourseMaterials : <<include>> #purple

' Use case specification documentation
note right of managecourses
  <b>Use Case Specification:</b>
  
  <b>Use Case Name:</b> Manage Courses
  
  <b>Actors:</b> Admin (Primary)
  
  <b>Description:</b> This use case allows administrators to manage courses in the e-learning system.
  
  <b>Preconditions:</b>
  1. Admin is logged into the system with Admin role
  2. Admin has appropriate privileges
  
  <b>Postconditions:</b>
  1. Courses are created, updated, or managed as needed
  
  <b>Main Flow:</b>
  1. Admin navigates to the admin dashboard
  2. Admin selects the course management section
  3. System displays existing courses with management options
  4. Admin can:
     - Create new courses
     - Edit existing course details
     - Deactivate courses
     - View course list
     - Assign courses to departments
     - Manage course materials
  
  <b>Alternative Flows:</b>
  A1. Create Course
    1. Admin selects "Create New Course"
    2. Admin enters course details (name, description, code, credits, etc.)
    3. System validates input
    4. System creates the course
  
  A2. Edit Course Details
    1. Admin selects a course from the list
    2. Admin modifies course information
    3. System validates changes
    4. System updates course record
  
  A3. Deactivate Course
    1. Admin selects a course
    2. Admin chooses to deactivate the course
    3. System prompts for confirmation and warns about dependencies
    4. System deactivates the course but preserves data
  
  A4. Assign Course to Department
    1. Admin selects a course
    2. Admin assigns or changes the department for the course
    3. System updates course department assignment
    4. System notifies affected departments
  
  A5. Manage Course Materials
    1. Admin selects a course
    2. Admin views materials assigned to the course
    3. Admin can add, edit, or remove materials
    4. System updates course materials
  
  <b>Exception Flows:</b>
  E1. Validation errors
    1. Admin enters invalid data for creation/editing
    2. System highlights problematic fields
    3. Admin must correct issues before proceeding
  
  E2. Deletion constraints
    1. Admin attempts to deactivate course with active enrollments
    2. System prevents operation and displays warning
    3. Admin must resolve dependencies before proceeding
end note
@enduml 